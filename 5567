using System;
using System;Linq;
using System.Collections.Generic;

class Program
{
    static void Main(string[] args)
    {
        // 총 동기 수, 친구관계 리스트 길이 지정
        int allFellowNum = int.Parse(Console.ReadLine());
        int listLen = int.Parse(Console.ReadLine());

        // 친구관계 리스트
        string[] onList = new string[listLen];
        var friendDirect = new List<string>();
        var friendIndirect = new List<string>();

        // 친구관계 리스트 생성 (숫자순)
        for (int i = 0; i < listLen; i++)
        {
            onList[i] = Console.ReadLine();
        }
        Array.Sort(onList);
        // 상근의 친구 friendDirect 리스트에 추가
        foreach (var fisrtLetter in onList)
        {
            if (fisrtLetter.Split(" ")[0] == "1") friendDirect.Add(fisrtLetter.Split(" ")[1]);
        }

        // 상근의 친구의 친구를 friendIndirect 로 카운트
        for (int i=0; i<onList.Length; i++)
        {
            if (friendDirect.Contains(onList[i].Split(" ")[0]) == true && friendDirect.Contains(onList[i].Split(" ")[1]) == false)
                friendIndirect.Add(onList[i].Split(" ")[1]);
            // 1-7,3-7과 같이 [1]을 통해 [0]의 친구의 친구를 잡아주는 경우
            // 이 경우 [1]이 directFriend이면서 [0]이 "1"(상근)인 경우까지 잡아주기 때문에 마지막에 -1 필요
            else if (friendDirect.Contains(onList[i].Split(" ")[0]) == false && friendDirect.Contains(onList[i].Split(" ")[1]) == true)
                friendIndirect.Add(onList[i].Split(" ")[0]);
        }
            
        // 2-4,3-4 같이 중복되는 경우 처리
        List<string> indirectUnique = friendIndirect.Distinct().ToList();

        // friendIndirect 리스트에 포함되었던 "1"(상근)을 빼줌
        Console.WriteLine(friendDirect.Count+indirectUnique.Count-1);
    }
}
